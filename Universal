local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Maxgat5/UiLib/main/lua"))() -- cal the lib
local a = library:CreateWindow("Universal") -- Change to anything
local b = a:CreateFolder("Main")
local c = a:CreateFolder("Player")
local g = a:CreateFolder("Aim")
local e = a:CreateFolder("Visual")
local f = a:CreateFolder("HitBox")
local h = a:CreateFolder("Click")
local d = a:CreateFolder("Extra")
local i = a:CreateFolder("Credits")





--AimBot Thingss
local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local Holding = false
local Locked = false
local Victim

--Other tings
local client = game.Players.LocalPlayer
local char = client.Character

--inf 
local noclip = false
local infjumpenabled = false

game:GetService("RunService").RenderStepped:Connect(function()
    if noclip == true then
        game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
    end
end)

game:GetService("UserInputService").JumpRequest:Connect(function()
	if infjumpenabled then
		game:GetService("Players").LocalPlayer.Character.Humanoid:ChangeState("Jumping")
	end
end)




--Main
b:Button("AntiKick",function()
local hook = game:GetService("Players").LocalPlayer.Kick;
local mt = getrawmetatable(game:GetService("Players").LocalPlayer)
local OldNamecall = mt.__namecall
local OldIndex = mt.__index

print("AntiKick") -- remove this if you want, just dont claim it as yours ty
make_writeable(mt)
mt.__namecall = newcclosure(function(self, Index, ...)
    local NameCallMethod = getnamecallmethod()
    if type(NameCallMethod) == "string" then
        if NameCallMethod == "Kick" or NameCallMethod == "kick" then
            print("Prevented Kick At " .. tostring(os.time()))
            return function()end
        end
    end
    return OldNamecall(self, Index, ...)
end)

mt.__index = newcclosure(function(self, Index, ...)
    if type(Index) == "string" then
        if Index == "Kick" or Index == "kick" then
            print("Prevented Kick At " .. tostring(os.time()))
            return function()end
        end
    end
    return OldIndex(self, Index, ...)
end)
make_readonly(mt)
end)


b:Button("Rejoin Game",function()
local ts = game:GetService("TeleportService")
local p = game:GetService("Players").LocalPlayer

ts:Teleport(game.PlaceId, p)    
end)

b:Button("Give Btools", function()
    tool1 = Instance.new("HopperBin",game.Players.LocalPlayer.Backpack)
	tool2 = Instance.new("HopperBin",game.Players.LocalPlayer.Backpack)
	tool1.BinType = "Clone"
	tool2.BinType = "Hammer"
end)




--Aim

g:Toggle("Enable AimBot", function(value)

_G.AimbotEnabled = value
_G.TeamCheck = false -- If set to true then the script would only lock your aim at enemy team members.
_G.AimPart = "Head" -- Where the aimbot script would lock at.
_G.Sensitivity = 0 -- How many seconds it takes for the aimbot script to officially lock onto the target's aimpart.

_G.CircleSides = 64 -- How many sides the FOV circle would have.
_G.CircleColor = Color3.fromRGB(255, 255, 255) -- (RGB) Color that the FOV circle would appear as.
_G.CircleTransparency = 0.7 -- Transparency of the circle.
_G.CircleRadius = 80 -- The radius of the circle / FOV.
_G.CircleFilled = false -- Determines whether or not the circle is filled.
_G.CircleVisible = false -- Determines whether or not the circle is visible.
_G.CircleThickness = 0 -- The thickness of the circle.

local FOVCircle = Drawing.new("Circle")
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Radius = _G.CircleRadius
FOVCircle.Filled = _G.CircleFilled
FOVCircle.Color = _G.CircleColor
FOVCircle.Visible = _G.CircleVisible
FOVCircle.Radius = _G.CircleRadius
FOVCircle.Transparency = _G.CircleTransparency
FOVCircle.NumSides = _G.CircleSides
FOVCircle.Thickness = _G.CircleThickness

local function GetClosestPlayer()
	local MaximumDistance = _G.CircleRadius
	local Target

	for _, v in pairs(game.Players:GetPlayers()) do
        if v.Name ~= LocalPlayer.Name then
            if _G.TeamCheck == true then 
                if v.Team ~= LocalPlayer.Team then
                    if workspace:FindFirstChild(v.Name) ~= nil then
                        if workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                            if workspace[v.Name]:FindFirstChild("Humanoid") ~= nil and workspace[v.Name]:FindFirstChild("Humanoid").Health ~= 0 then
                                local ScreenPoint = Camera:WorldToScreenPoint(workspace[v.Name]:WaitForChild("HumanoidRootPart", math.huge).Position)
                                local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
                                
                                if VectorDistance < MaximumDistance then
                                    Target = v
                                end
                            end
                        end
                    end
                end
            else
                if workspace:FindFirstChild(v.Name) ~= nil then
                    if workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                        if workspace[v.Name]:FindFirstChild("Humanoid") ~= nil and workspace[v.Name]:FindFirstChild("Humanoid").Health ~= 0 then
                            local ScreenPoint = Camera:WorldToScreenPoint(workspace[v.Name]:WaitForChild("HumanoidRootPart", math.huge).Position)
                            local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
                            
                            if VectorDistance < MaximumDistance then
                                Target = v
                            end
                        end
                    end
                end
            end
		end
	end

	return Target
end

UserInputService.InputBegan:Connect(function(Input)
    if Input.UserInputType == Enum.UserInputType.MouseButton2 then
        Holding = true
    end
end)

UserInputService.InputEnded:Connect(function(Input)
    if Input.UserInputType == Enum.UserInputType.MouseButton2 then
        Holding = false
        Locked = false
    end
end)

RunService.RenderStepped:Connect(function()
    FOVCircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
    FOVCircle.Radius = _G.CircleRadius
    FOVCircle.Filled = _G.CircleFilled
    FOVCircle.Color = _G.CircleColor
    FOVCircle.Visible = _G.CircleVisible
    FOVCircle.Radius = _G.CircleRadius
    FOVCircle.Transparency = _G.CircleTransparency
    FOVCircle.NumSides = _G.CircleSides
    FOVCircle.Thickness = _G.CircleThickness
    if Holding == true and _G.AimbotEnabled == true then
        TweenService:Create(Camera, TweenInfo.new(_G.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(Camera.CFrame.Position, GetClosestPlayer().Character[_G.AimPart].Position)}):Play()
        Locked = true
    end
end)
end)

g:Toggle("Team Check", function(value)
    
_G.TeamCheck = value -- If set to true then the script would only lock your aim at enemy team members.

end)

g:Toggle("FOV Circle", function(value)

_G.CircleSides = 64 -- How many sides the FOV circle would have.
_G.CircleColor = Color3.fromRGB(255, 255, 255) -- (RGB) Color that the FOV circle would appear as.
_G.CircleRadius = 80 -- The radius of the circle / FOV.
_G.CircleVisible = value -- Determines whether or not the circle is visible.
_G.CircleThickness = 0 -- The thickness of the circle.


end)

g:Slider("FOV Circle Size",0,1080,30, function(value)
    
_G.CircleRadius = value -- The radius of the circle / FOV.

end)

g:Slider("FOV Circle Transparency",0,1,30, function(value)
    
_G.CircleTransparency = value -- Transparency of the circle.

end)


g:Slider("FOV Circle Thickness",0, 20,30, function(value)
    
_G.CircleThickness = value -- The thickness of the circle.

end)

--player

c:Slider("WalkSpeed",0,250,30, function(Value)
	game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
end)

c:Slider("Jump Power",0,250,30, function(Value)
	game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = Value
end)

c:Slider("Gravity",0,500,30, function(Value)
    workspace.Gravity = Value
end)

c:Toggle("Noclip", function(Value)
    noclip = Value
end)

c:Toggle("Infinite Jump", function(value)
infjumpenabled = value
end)

--Visual
e:Slider("FOV",0,120,30, function(Value)
    
local amount = fovamount

game:GetService'Workspace'.Camera.FieldOfView = Value

end)

e:Button("FPS Booster", function(value)
local removedecals = false
local g = game
local w = g.Workspace
local l = g.Lighting
local t = w.Terrain
t.WaterWaveSize = 0
t.WaterWaveSpeed = 0
t.WaterReflectance = 0
t.WaterTransparency = 0
l.GlobalShadows = false
l.FogEnd = 9e9
l.Brightness = 0
settings().Rendering.QualityLevel = "Level01"
for i, v in pairs(g:GetDescendants()) do
    if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    elseif v:IsA("Decal") or v:IsA("Texture") and removedecals then
        v.Transparency = 1
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then
        v.BlastPressure = 1
        v.BlastRadius = 1
    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
        v.Enabled = false
    elseif v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
        v.TextureID = 10385902758728957
    end
end
for i, e in pairs(l:GetChildren()) do
    if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
        e.Enabled = false
    end
end
end)


e:Toggle("Xray", function(value)
    if value then
        for i,v in pairs(workspace:GetDescendants()) do
			if v:IsA("BasePart") and not v.Parent.Parent:FindFirstChild("Humanoid") then
				v.Transparency = v.Transparency + 0.5
			end
		end
    else
        for i,v in pairs(workspace:GetDescendants()) do
			if v:IsA("BasePart") and not v.Parent.Parent:FindFirstChild("Humanoid") then
				v.Transparency = v.Transparency - 0.5
			end
		end
    end
end)

e:Toggle("ESP", function(value)
shared.Visuals = { --// Configuration (Will load default settings if shared.Visuals doesn't exist.)
    Enabled = value,
    CrosshairEnabled = false,
    Boxes = true,
    Healthbar = true,
    Tracers = true,
    Info = true,
    ShowAllyTeam = true,
    UseTeamColor = true,
    AllyColor = Color3.fromRGB(0, 255, 0),
    EnemyColor = Color3.fromRGB(255, 0, 0),
    Crosshair = {
        Size = 5,
        Thickness = 1.5,
        Offset = 5
    }
}

loadstring(game:HttpGet("https://raw.githubusercontent.com/coastss/releases/main/universal_visuals.lua"))()
end)

e:Toggle("FullBright", function(value)
if not _G.FullBrightExecuted then

	_G.FullBrightEnabled = false

	_G.NormalLightingSettings = {
		Brightness = game:GetService("Lighting").Brightness,
		ClockTime = game:GetService("Lighting").ClockTime,
		FogEnd = game:GetService("Lighting").FogEnd,
		GlobalShadows = game:GetService("Lighting").GlobalShadows,
		Ambient = game:GetService("Lighting").Ambient
	}

	game:GetService("Lighting"):GetPropertyChangedSignal("Brightness"):Connect(function()
		if game:GetService("Lighting").Brightness ~= 1 and game:GetService("Lighting").Brightness ~= _G.NormalLightingSettings.Brightness then
			_G.NormalLightingSettings.Brightness = game:GetService("Lighting").Brightness
			if not _G.FullBrightEnabled then
				repeat
					wait()
				until _G.FullBrightEnabled
			end
			game:GetService("Lighting").Brightness = 1
		end
	end)

	game:GetService("Lighting"):GetPropertyChangedSignal("ClockTime"):Connect(function()
		if game:GetService("Lighting").ClockTime ~= 12 and game:GetService("Lighting").ClockTime ~= _G.NormalLightingSettings.ClockTime then
			_G.NormalLightingSettings.ClockTime = game:GetService("Lighting").ClockTime
			if not _G.FullBrightEnabled then
				repeat
					wait()
				until _G.FullBrightEnabled
			end
			game:GetService("Lighting").ClockTime = 12
		end
	end)

	game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(function()
		if game:GetService("Lighting").FogEnd ~= 786543 and game:GetService("Lighting").FogEnd ~= _G.NormalLightingSettings.FogEnd then
			_G.NormalLightingSettings.FogEnd = game:GetService("Lighting").FogEnd
			if not _G.FullBrightEnabled then
				repeat
					wait()
				until _G.FullBrightEnabled
			end
			game:GetService("Lighting").FogEnd = 786543
		end
	end)

	game:GetService("Lighting"):GetPropertyChangedSignal("GlobalShadows"):Connect(function()
		if game:GetService("Lighting").GlobalShadows ~= false and game:GetService("Lighting").GlobalShadows ~= _G.NormalLightingSettings.GlobalShadows then
			_G.NormalLightingSettings.GlobalShadows = game:GetService("Lighting").GlobalShadows
			if not _G.FullBrightEnabled then
				repeat
					wait()
				until _G.FullBrightEnabled
			end
			game:GetService("Lighting").GlobalShadows = false
		end
	end)

	game:GetService("Lighting"):GetPropertyChangedSignal("Ambient"):Connect(function()
		if game:GetService("Lighting").Ambient ~= Color3.fromRGB(178, 178, 178) and game:GetService("Lighting").Ambient ~= _G.NormalLightingSettings.Ambient then
			_G.NormalLightingSettings.Ambient = game:GetService("Lighting").Ambient
			if not _G.FullBrightEnabled then
				repeat
					wait()
				until _G.FullBrightEnabled
			end
			game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
		end
	end)

	game:GetService("Lighting").Brightness = 1
	game:GetService("Lighting").ClockTime = 12
	game:GetService("Lighting").FogEnd = 786543
	game:GetService("Lighting").GlobalShadows = false
	game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)

	local LatestValue = true
	spawn(function()
		repeat
			wait()
		until _G.FullBrightEnabled
		while wait() do
			if _G.FullBrightEnabled ~= LatestValue then
				if not _G.FullBrightEnabled then
					game:GetService("Lighting").Brightness = _G.NormalLightingSettings.Brightness
					game:GetService("Lighting").ClockTime = _G.NormalLightingSettings.ClockTime
					game:GetService("Lighting").FogEnd = _G.NormalLightingSettings.FogEnd
					game:GetService("Lighting").GlobalShadows = _G.NormalLightingSettings.GlobalShadows
					game:GetService("Lighting").Ambient = _G.NormalLightingSettings.Ambient
				else
					game:GetService("Lighting").Brightness = 1
					game:GetService("Lighting").ClockTime = 12
					game:GetService("Lighting").FogEnd = 786543
					game:GetService("Lighting").GlobalShadows = false
					game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
				end
				LatestValue = not LatestValue
			end
		end
	end)
end

_G.FullBrightExecuted = value
_G.FullBrightEnabled = not _G.FullBrightEnabled
end)

--HitBox

f:Slider("Size",0,120,30, function(Value)
_G.Type = 3 -- 1 means all players; 2 means NPCs, 3 Means both.
_G.Size = Value

function Player(Toggled)
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v.Name ~= game.Players.LocalPlayer.Name then
pcall(function()
if _G.AlreadyDone ~= true then
_G.AlreadyDone = true
_G.OGPSize = v.Character.HumanoidRootPart.Size
end
end)
if Toggled == false then
v.Character.HumanoidRootPart.Size = Vector3.new(_G.OGPSize, _G.OGPSize, _G.OGPSize)
else
v.Character.HumanoidRootPart.CanCollide = false
v.Character.HumanoidRootPart.Size = Vector3.new(_G.Size, _G.Size, _G.Size)
v.Character.HumanoidRootPart.Color = Color3.new(193, 193, 193)
v.Character.HumanoidRootPart.Transparency = 0.8
end
end
end
end

function NPC(Toggled)
for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do
if v:FindFirstChild("HumanoidRootPart") and string.match(v.Name:lower(),_G.NPCName:lower()) or v:FindFirstChild("HumanoidRootPart") and v.Name == _G.NPCName then
pcall(function()
if _G.AlreadyDone2 ~= true then
_G.AlreadyDone2 = true
_G.OGNSize = v.HumanoidRootPart.Size
end
end)
if Toggled == false then
v.HumanoidRootPart.Size = Vector3.new(_G.OGNSize, _G.OGNSize, _G.OGNSize)
else
v.HumanoidRootPart.CanCollide = false
v.HumanoidRootPart.Size = Vector3.new(_G.Size, _G.Size, _G.Size)
v.HumanoidRootPart.Color = Color3.new(193, 193, 193)
v.HumanoidRootPart.Transparency = 0.8
end
end
end
end

if _G.HitboxToggled == true then
if _G.Type == 1 then
repeat Player(true) wait(1) until _G.HitboxToggled == false
elseif _G.Type == 2 then
repeat NPC(true) wait(1) until _G.HitboxToggled == false
elseif _G.Type == 3 then
repeat Player(true) NPC(true) wait(1) until _G.HitboxToggled == false
end
else
Player(false)
NPC(false)
end
end)

f:Toggle("Enable", function(Value)
_G.HitboxToggled = Value -- set to false if you want off.
_G.Type = 3 -- 1 means all players; 2 means NPCs, 3 Means both.


function Player(Toggled)
for i,v in pairs(game:GetService("Players"):GetChildren()) do
if v.Name ~= game.Players.LocalPlayer.Name then
pcall(function()
if _G.AlreadyDone ~= true then
_G.AlreadyDone = true
_G.OGPSize = v.Character.HumanoidRootPart.Size
end
end)
if Toggled == false then
v.Character.HumanoidRootPart.Size = Vector3.new(_G.OGPSize, _G.OGPSize, _G.OGPSize)
else
v.Character.HumanoidRootPart.CanCollide = false
v.Character.HumanoidRootPart.Size = Vector3.new(_G.Size, _G.Size, _G.Size)
v.Character.HumanoidRootPart.Color = Color3.new(193, 193, 193)
v.Character.HumanoidRootPart.Transparency = 0.8
end
end
end
end

function NPC(Toggled)
for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do
if v:FindFirstChild("HumanoidRootPart") and string.match(v.Name:lower(),_G.NPCName:lower()) or v:FindFirstChild("HumanoidRootPart") and v.Name == _G.NPCName then
pcall(function()
if _G.AlreadyDone2 ~= true then
_G.AlreadyDone2 = true
_G.OGNSize = v.HumanoidRootPart.Size
end
end)
if Toggled == false then
v.HumanoidRootPart.Size = Vector3.new(_G.OGNSize, _G.OGNSize, _G.OGNSize)
else
v.HumanoidRootPart.CanCollide = false
v.HumanoidRootPart.Size = Vector3.new(_G.Size, _G.Size, _G.Size)
v.HumanoidRootPart.Color = Color3.new(193, 193, 193)
v.HumanoidRootPart.Transparency = 0.8
end
end
end
end

if _G.HitboxToggled == true then
if _G.Type == 1 then
repeat Player(true) wait(1) until _G.HitboxToggled == false
elseif _G.Type == 2 then
repeat NPC(true) wait(1) until _G.HitboxToggled == false
elseif _G.Type == 3 then
repeat Player(true) NPC(true) wait(1) until _G.HitboxToggled == false
end
else
Player(false)
NPC(false)
end
end)

--Ctrl
h:Button("Ctrl+Click destroy", function()
local Plr = game:GetService("Players").LocalPlayer
local Mouse = Plr:GetMouse()

Mouse.Button1Down:connect(function()
if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
if not Mouse.Target then return end
Mouse.Target:Destroy()
end)
end)

h:Button("Ctrl+Click Anchor", function()
local Plr = game:GetService("Players").LocalPlayer
local Mouse = Plr:GetMouse()

Mouse.Button1Down:connect(function()
if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
if not Mouse.Target then return end
Mouse.Target.Anchored = true
end)
end)

h:Button("Ctrl+Click UnAnchor", function()
local Plr = game:GetService("Players").LocalPlayer
local Mouse = Plr:GetMouse()

Mouse.Button1Down:connect(function()
if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
if not Mouse.Target then return end
Mouse.Target.Anchored = false
end)
end)

h:Button("Ctrl+Click Break Joints", function()
local Plr = game:GetService("Players").LocalPlayer
local Mouse = Plr:GetMouse()

Mouse.Button1Down:connect(function()
if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
if not Mouse.Target then return end
Mouse.Target:BreakJoints()
end)
end)

h:Button("Ctrl+Click Can Collide", function()
local Plr = game:GetService("Players").LocalPlayer
local Mouse = Plr:GetMouse()

Mouse.Button1Down:connect(function()
if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
if not Mouse.Target then return end
Mouse.Target.CanCollide = true
end)
end)

h:Button("Ctrl+Click UnCan Collide", function()
local Plr = game:GetService("Players").LocalPlayer
local Mouse = Plr:GetMouse()

Mouse.Button1Down:connect(function()
if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
if not Mouse.Target then return end
Mouse.Target.CanCollide = false
end)
end)

h:Button("Ctrl+Click Teleport", function()
local Plr = game:GetService("Players").LocalPlayer
local Mouse = Plr:GetMouse()

Mouse.Button1Down:connect(function()
if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
if not Mouse.Target then return end
Plr.Character:MoveTo(Mouse.Hit.p)
end)
end)

--Extra

d:Button("Destroy Map", function()
for i,v in pairs(game.Workspace:GetDescendants()) do
v:destroy()
end
end)

d:Toggle("Rainbow Cursor", function(value)
getgenv().CursorConfig = {
   Color = Color3.fromRGB(255,255,255),
   OutlineColor = Color3.fromRGB(0,0,0),

   Transparency = 1,
   OutlineTransparency = 1,

   Rainbow = value,
   OutlineRainbow = value,

   DeleteCursor = false
}

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

if not getgenv().CursorConfig then
    getgenv().CursorConfig = {
        Color = Color3.fromRGB(255,255,255),
        OutlineColor = Color3.fromRGB(0,0,0),

        Transparency = 1,
        OutlineTransparency = 1,

        Rainbow = false,
        OutlineRainbow = false,

        DeleteCursor = false
    }
end

local CursorOutline = Drawing.new("Triangle")
CursorOutline.Visible = true
CursorOutline.Transparency = 1
CursorOutline.Color = CursorConfig.OutlineColor
CursorOutline.Thickness = 1
CursorOutline.Filled = true

local Cursor = Drawing.new("Triangle")
Cursor.Visible = true
Cursor.Transparency = 1
Cursor.Color = CursorConfig.Color
Cursor.Thickness = 1
Cursor.Filled = true

Render = RunService.RenderStepped:Connect(function()
    if UserInputService.MouseBehavior == Enum.MouseBehavior.Default then
        UserInputService.MouseIconEnabled = false
        local Mouse = UserInputService:GetMouseLocation()

        Cursor.PointA = Vector2.new(Mouse.X,Mouse.Y + 15)
        Cursor.PointB = Vector2.new(Mouse.X,Mouse.Y)
        Cursor.PointC = Vector2.new(Mouse.X + 10,Mouse.Y + 10)
        Cursor.Color = CursorConfig.Color
        Cursor.Transparency = CursorConfig.Transparency

        CursorOutline.PointA = Vector2.new(Mouse.X,Mouse.Y + 16)
        CursorOutline.PointB = Vector2.new(Mouse.X,Mouse.Y)
        CursorOutline.PointC = Vector2.new(Mouse.X + 11,Mouse.Y + 10)
        CursorOutline.Color = CursorConfig.OutlineColor
        CursorOutline.Transparency = CursorConfig.OutlineTransparency
    else
        Cursor.Transparency = 0
        CursorOutline.Transparency = 0
    end

    if CursorConfig.DeleteCursor then
        Render:Disconnect()
        Cursor:Remove()
        CursorOutline:Remove()
        UserInputService.MouseIconEnabled = true
    end

    if CursorConfig.Rainbow then
        local Hue, Saturation, Value = CursorConfig.Color:ToHSV()
        if Hue == 1 then
            Hue = 0
        end
        CursorConfig.Color = Color3.fromHSV(Hue + 0.001, 1, 1)
    end
    if CursorConfig.OutlineRainbow then
        local Hue, Saturation, Value = CursorConfig.OutlineColor:ToHSV()
        if Hue == 1 then
            Hue = 0
        end
        CursorConfig.OutlineColor = Color3.fromHSV(Hue + 0.001, 1, 1)
    end
end)
end)

d:Toggle("Delete Cursor", function(value)
getgenv().CursorConfig = {
   Color = Color3.fromRGB(255,255,255),
   OutlineColor = Color3.fromRGB(0,0,0),

   Transparency = 1,
   OutlineTransparency = 1,

   Rainbow = false,
   OutlineRainbow = false,

   DeleteCursor = value
}

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

if not getgenv().CursorConfig then
    getgenv().CursorConfig = {
        Color = Color3.fromRGB(255,255,255),
        OutlineColor = Color3.fromRGB(0,0,0),

        Transparency = 1,
        OutlineTransparency = 1,

        Rainbow = false,
        OutlineRainbow = false,

        DeleteCursor = false
    }
end

local CursorOutline = Drawing.new("Triangle")
CursorOutline.Visible = true
CursorOutline.Transparency = 1
CursorOutline.Color = CursorConfig.OutlineColor
CursorOutline.Thickness = 1
CursorOutline.Filled = true

local Cursor = Drawing.new("Triangle")
Cursor.Visible = true
Cursor.Transparency = 1
Cursor.Color = CursorConfig.Color
Cursor.Thickness = 1
Cursor.Filled = true

Render = RunService.RenderStepped:Connect(function()
    if UserInputService.MouseBehavior == Enum.MouseBehavior.Default then
        UserInputService.MouseIconEnabled = false
        local Mouse = UserInputService:GetMouseLocation()

        Cursor.PointA = Vector2.new(Mouse.X,Mouse.Y + 15)
        Cursor.PointB = Vector2.new(Mouse.X,Mouse.Y)
        Cursor.PointC = Vector2.new(Mouse.X + 10,Mouse.Y + 10)
        Cursor.Color = CursorConfig.Color
        Cursor.Transparency = CursorConfig.Transparency

        CursorOutline.PointA = Vector2.new(Mouse.X,Mouse.Y + 16)
        CursorOutline.PointB = Vector2.new(Mouse.X,Mouse.Y)
        CursorOutline.PointC = Vector2.new(Mouse.X + 11,Mouse.Y + 10)
        CursorOutline.Color = CursorConfig.OutlineColor
        CursorOutline.Transparency = CursorConfig.OutlineTransparency
    else
        Cursor.Transparency = 0
        CursorOutline.Transparency = 0
    end

    if CursorConfig.DeleteCursor then
        Render:Disconnect()
        Cursor:Remove()
        CursorOutline:Remove()
        UserInputService.MouseIconEnabled = true
    end

    if CursorConfig.Rainbow then
        local Hue, Saturation, Value = CursorConfig.Color:ToHSV()
        if Hue == 1 then
            Hue = 0
        end
        CursorConfig.Color = Color3.fromHSV(Hue + 0.001, 1, 1)
    end
    if CursorConfig.OutlineRainbow then
        local Hue, Saturation, Value = CursorConfig.OutlineColor:ToHSV()
        if Hue == 1 then
            Hue = 0
        end
        CursorConfig.OutlineColor = Color3.fromHSV(Hue + 0.001, 1, 1)
    end
end)

end)

--Credits
i:Button("Scripts by Wechuge#3876",function()
    setclipboard("Wechuge#3876")
end)

i:Button("Hub by Wechuge#3876",function()
    setclipboard("Wechuge#3876")
end)
 
i:Button("Discord Server",function()
    setclipboard("https://discord.gg/K4txdRSVfq")
end)
